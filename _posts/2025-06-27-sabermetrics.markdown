---
layout: post
title:  "임베디드 SW 개발팀을 위한 세이버메트릭스 플레이북"
date:   2025-06-27 08:46:00 +0900
categories: SW Engineering
---


# 임베디드 SW 개발팀을 위한 세이버메트릭스 플레이북: 하드웨어의 제약을 넘어 진정한 가치를 측정하다

## 서론: 임베디드 시스템의 측정 위기
### 단순 지표의 폭정과 임베디드 시스템의 특수성

소프트웨어 개발과 프로야구는 복잡하고 팀 기반으로 이루어지는 활동이라는 공통점을 가집니다. 두 분야 모두에서 전통적이고 측정하기 쉬운 통계는 종종 진정한 가치를 포착하지 못하며, 심지어 비생산적인 행동을 유발하기도 합니다.[1, 2]

소프트웨어 개발 분야에서 '코드 라인 수(LOC)'나 '커밋 횟수' 같은 지표는 품질보다 양을 장려하여 코드 비대화와 기술 부채를 유발하는 것으로 악명이 높습니다.[2, 3] 이러한 문제는 임베디드 시스템 개발에서 더욱 치명적입니다. 웹 애플리케이션과 달리, 임베디드 소프트웨어의 실패는 단순한 서버 재시작으로 해결되지 않습니다. 이는 수백만 개의 디바이스 리콜, 물리적 안전사고, 혹은 막대한 금전적 손실로 이어질 수 있습니다.[4] IBM의 연구에 따르면, 프로덕션(양산) 단계에서 발견된 버그를 수정하는 비용은 설계 단계에서 발견된 버그보다 최대 100배 더 높을 수 있으며[5], 이는 하드웨어 제조 주기가 포함된 임베디드 분야에서 더욱 증폭됩니다.[6, 7]

임베디드 시스템은 제한된 리소스(CPU, 메모리), 하드웨어와의 직접적인 상호작용, 그리고 실시간 제약이라는 고유한 특성을 가집니다. 따라서 이 분야의 성과 측정은 웹 개발보다 훨씬 더 다차원적이고 신중해야 합니다.

### 세이버메트릭스 혁명이라는 평행선
프로야구 역시 동일한 문제에 직면했습니다. 투수의 '승리'와 같은 전통적인 통계는 팀의 득점 지원에 크게 의존하며, '타율'은 모든 안타를 상황의 중요성과 무관하게 동일하게 취급합니다. 세이버메트릭스 운동은 선수의 진정한 기술과 승리에 대한 기여도를 더 정확하게 반영하는 지표를 찾기 위해 경기를 해부하려는 시도였습니다.[8]

본 보고서는 세이버메트릭스의 핵심 철학을 임베디드 소프트웨어 엔지니어링 성과 측정에 적용하여 혁신적인 플레이북을 만들 것을 제안합니다. 우리는 단순한 계수를 넘어 역량, 맥락, 그리고 시스템 수준의 영향을 이해하는 방향으로 나아갈 것이며, 궁극적으로 예측 가능하고, 진단적이며, 총체적인 프레임워크를 구축할 것입니다.

## FIP 철학: 환경으로부터 기술을 분리하다
### ERA (평균자책점): 전통적이고 상황 의존적인 지표
평균자책점(ERA)은 투수가 9이닝당 허용하는 자책점을 측정하지만[7, 5], 투수 뒤에 있는 수비의 질과 운의 요소에 크게 영향을 받습니다.[5, 9] 이는 개인 통계처럼 보이지만 실제로는 팀의 성과가 섞여 있는 지표입니다.
### DIPS 이론과 FIP(수비 무관 평균자책점)의 탄생
획기적인 발전은 DIPS(수비 무관 투구 지표) 이론에서 비롯되었습니다.[10, 11] 연구에 따르면, 투수들은 인플레이된 타구의 결과에 대해서는 일관된 통제력을 갖지 못하지만, 세 가지 '진정한' 결과, 즉 홈런, 볼넷, 탈삼진에 대해서는 상당한 통제력을 가집니다.[12, 13, 14, 15, 16] FIP는 오직 이 세 가지 통제 가능한 요소만을 사용하여 투수의 성과를 수비와 운이라는 '노이즈'로부터 효과적으로 분리합니다.[12, 13, 14, 15, 16]

### 분리의 핵심 원칙
FIP의 심오한 가치는 공식 자체가 아니라, 테스트 대상 시스템의 성능을 환경의 가변성으로부터 분리하는 철학에 있습니다. FIP는 투수의 근본적인 재능에 대한 더 안정적이고 예측적인 척도를 만듭니다.[15] 임베디드 팀에 대한 유사한 질문은 "더 넓은 제품 시스템 내에서 엔지니어링 팀이 진정으로 통제할 수 있는 것은 무엇인가?"입니다. 그 답은 최종 제품의 시장 점유율이 아니라, 펌웨어를 안정적으로 빌드하고, 테스트하며, 하드웨어에 통합하는 제공 프로세스의 효율성과 품질입니다.
표 1: 임베디드 엔지니어링 리더를 위한 세이버메트릭스 용어집
| 용어 | 야구 정의 | 임베디드 소프트웨어 등가물 |
|---|---|---|
| ERA | 평균자책점: 9이닝당 허용된 자책점, 수비/운에 의해 영향 받음.[5] | 관찰된 시스템 성능 (OSP): 최종 제품의 가시적 결과 (예: 전력 소모, 충돌률, HIL 테스트 통과율, 고객 보고 결함). |
| FIP | 수비 무관 평균자책점: 통제 가능한 결과(홈런, 볼넷, 삼진)에만 기반한 ERA 유사 지표.[13] | 임베디드 제공 성능 (EDP): 팀의 내부 제공 프로세스에 기반한 지표 (예: DORA 지표). |
| WPA | 승리 확률 추가: 단일 플레이로 인한 팀의 승리 기대치 변화.[17, 18] | 시스템 가치 추가 (SVA): 특정 변경이 핵심 시스템 목표(예: 배터리 수명, 안전 인증)에 미치는 측정 가능한 영향. |
| LI | 레버리지 인덱스: 승리 확률을 바꿀 잠재력에 기반한 특정 상황의 중요도.[19, 20] | 작업 긴급성 및 영향력 (SLI): 작업의 중요도 (예: 프로덕션 비상 패치 vs. 사소한 리팩토링). |

## 임베디드 시스템의 "FIP": DORA 지표를 "임베디드 제공 성능(EDP)"으로 재해석하기
### DORA 지표의 재정의
Google의 DORA 지표는 소프트웨어 제공 성능의 표준이지만, 임베디드 환경에서는 그 의미를 재정의해야 합니다.[21, 22, 23] 우리는 이 네 가지 지표를 임베디드 팀의 "FIP"로, 즉 **임베디드 제공 성능(Embedded Delivery Performance, EDP)**으로 프레이밍할 것을 제안합니다. EDP는 팀의 내부 개발 및 제공 '기계'의 건강 상태를 측정하며, 이는 개발 중인 특정 하드웨어나 기능과는 독립적입니다.

### DORA를 EDP 구성 요소에 매핑하기
 * 속도 지표 ("빌드 및 통합 속도"):
   * 배포 빈도(Deployment Frequency): '프로덕션 배포'가 아니라 '안정적인 빌드의 HIL(Hardware-in-the-Loop) 테스트 환경 또는 통합 테스트 벤치로의 전달 빈도'를 의미합니다. 이는 팀이 얼마나 자주 검증 가능한 소프트웨어 아티팩트를 생성하는지를 측정합니다.
   * 변경 리드 타임(Lead Time for Changes): 커밋이 HIL 테스트 환경에서 성공적으로 실행되기까지 걸리는 시간입니다. 이는 코드 리뷰, 정적 분석, 빌드, 그리고 하드웨어에 플래싱하는 전체 파이프라인의 효율성을 반영합니다.
 * 안정성 지표 ("결함 방지 및 회복탄력성"):
   * 변경 실패율(Change Failure Rate, CFR): HIL 테스트 환경으로 전달된 빌드가 주요 테스트 케이스를 실패시키거나, 시스템을 불안정하게 만드는 비율입니다. 이는 홈런을 맞는 것과 같이 가장 파괴적인 결과와 유사합니다.
   * 서비스 복원 시간(Time to Restore Service, MTTR): HIL 테스트에서 발견된 치명적인 버그를 수정하고, 검증된 패치가 포함된 새로운 빌드를 다시 테스트 환경에 전달하기까지 걸리는 시간입니다. 이는 팀의 위기 대응 및 복구 능력을 측정합니다.

### 약점이 아닌 강점으로서의 분리
EDP(DORA)는 최종 제품의 성능(예: 배터리 수명)을 직접 측정하지 않습니다. 이는 의도적인 것입니다. EDP는 FIP와 마찬가지로, 엔지니어링 팀의 내재적 프로세스 역량에 대한 순수한 신호를 제공하기 위해 외부 환경(예: 하드웨어 가용성, 최종 제품의 시장 성공)을 무시합니다. 이는 "이 팀이 무엇을 만들도록 요청받았는지에 관계없이, 펌웨어를 만들고 통합하는 데 얼마나 능숙한가?"라는 질문에 높은 충실도로 답합니다.
표 2: "임베디드 제공 성능(EDP)" 프레임워크
| FIP 구성 요소 | 야구의 논리 (투수의 통제) | EDP (DORA) 등가물 | 임베디드 소프트웨어의 논리 (팀의 통제) |
|---|---|---|---|
| 홈런 (HR) | 가장 파괴적인 이벤트; 투수의 직접적인 실패. | 변경 실패율 | HIL 테스트 실패나 시스템 불안정을 유발하는 개발/검토/통합 프로세스의 직접적인 실패. |
| 볼넷 (BB) / HBP | 위험을 만들고 게임을 느리게 하는 제구력 실패. | 서비스 복원 시간 | 치명적 버그를 수정하고 시스템을 안정 상태로 복구하는 팀의 능력을 측정하며, 시스템 회복탄력성을 나타냄. |
| 탈삼진 (K) | 가장 지배적이고 긍정적인 결과; 수비를 관여시키지 않음. | 배포 빈도 | 원활하고 효율적인 프로세스를 나타내는, 검증 가능한 빌드의 성공적인 생성 및 전달 처리량을 측정. |
| 인플레이 아웃 | 긍정적인 결과이지만, 수비와의 성공적인 협업이 필요. | 변경 리드 타임 | 효율적인 협업(예: 코드 리뷰, QA 핸드오프, 하드웨어 팀과의 연동)에 의존하는 엔드-투-엔드 프로세스 속도를 측정. |