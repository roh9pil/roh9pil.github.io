# Dagger.io: 차세대 프로그래밍 가능한 CI/CD 엔진

## 🚀 Dagger란 무엇인가?

Dagger는 **프로그래밍 가능한 CI/CD 엔진**[1]으로, 복잡한 스크립트들로 얽힌 기존 CI/CD 시스템을 깔끔한 코드로 대체할 수 있게 해주는 혁신적인 플랫폼입니다. 2022년 3월에 정식 공개된 이 도구는[2] 컨테이너 기반으로 동작하며, 어떤 환경에서든 동일하게 실행할 수 있는 **이식성**이 핵심 특징입니다[3].

### 🔧 최신 버전 정보

현재 최신 버전은 **v0.18.12** (2025년 6월 27일 릴리스)[4]이며, 지속적으로 발전하고 있습니다. Dagger는 **Go, Python, TypeScript, PHP, Java** 등 다양한 프로그래밍 언어를 지원합니다[1].

## 💡 핵심 특징과 장점

### 1. **통합된 개발 환경**
- 로컬 개발과 CI 환경이 완벽히 통일됩니다[5]
- "로컬에서 되면 CI에서도 동작한다"는 원칙으로 개발자의 고충을 해결합니다

### 2. **언어 독립적 상호 운용성**
- Python 함수가 Go 함수를 호출하고, 이것이 다시 TypeScript 함수를 호출하는 것이 가능합니다[6]
- 팀 간 협업에서 언어 장벽을 완전히 제거합니다

### 3. **자동 캐싱 시스템**
- 모든 단계가 자동으로 캐시되어 **2배에서 10배까지** 빠른 실행 속도를 제공합니다[3]
- 레이어와 볼륨 두 가지 타입의 캐싱을 지원합니다

### 4. **컨테이너 네이티브**
- 모든 파이프라인이 OCI 호환 컨테이너에서 실행됩니다[2]
- Docker, Podman 등 어떤 컨테이너 런타임과도 호환됩니다

## 🛠️ 설치 및 환경 설정

### 시스템 요구사항
Dagger를 사용하기 위해서는 **컨테이너 런타임**이 필요합니다[7]. Docker, Podman, nerdctl 등을 미리 설치해주세요.

### 설치 방법

**macOS (Homebrew 사용시):**
```bash
brew install dagger/tap/dagger
```

**macOS (curl 사용시):**
```bash
curl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=/usr/local/bin sh
```

**Linux:**
```bash
curl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=$HOME/.local/bin sh
```

**Windows:**
```powershell
winget install Dagger.Cli
```

설치 후 다음 명령어로 확인해보세요:
```bash
dagger version
```

## 🏗️ 내부 동작 원리 이해하기

### 아키텍처 개요

Dagger의 아키텍처는 다음과 같이 구성됩니다[8]:

1. **Dagger Engine**: GraphQL API를 통해 컨테이너 작업을 제어하는 핵심 엔진
2. **SDK Layer**: 각 프로그래밍 언어별 타입 안전한 클라이언트
3. **Container Runtime**: Docker 등의 OCI 호환 런타임

### 핵심 타입 시스템

Dagger API는 강력한 타입 시스템을 제공합니다[9]:

| 타입 | 설명 |
|------|------|
| `Container` | OCI 호환 컨테이너 상태 |
| `Directory` | 디렉토리 (로컬 또는 Git 저장소) |
| `File` | 단일 파일 |
| `Service` | 장기 실행 서비스 컨테이너 |
| `Secret` | 보안 정보 (비밀번호, API 키 등) |
| `CacheVolume` | 실행 간 지속되는 캐시 볼륨 |

## 📝 실습: 첫 번째 Dagger Function 작성하기

### 1. 새 모듈 초기화

```bash
# 새 디렉토리 생성
mkdir hello-dagger
cd hello-dagger

# Go SDK로 모듈 초기화
dagger init --sdk=go --name=hello-dagger
```

### 2. 간단한 Hello World Function

`main.go` 파일을 다음과 같이 작성하세요:

```go
package main

import (
    "context"
    "dagger/hello-dagger/internal/dagger"
)

type HelloDagger struct{}

// Hello는 인사말을 반환하는 간단한 함수입니다
func (m *HelloDagger) Hello(name string) string {
    return "안녕하세요, " + name + "님! Dagger의 세계에 오신 것을 환영합니다! 🚀"
}

// Container를 이용한 실제 작업 예제
func (m *HelloDagger) ContainerExample(ctx context.Context) (string, error) {
    return dag.Container().
        From("alpine:latest").
        WithExec([]string{"echo", "Dagger로 컨테이너 제어하기!"}).
        Stdout(ctx)
}
```

### 3. Function 실행하기

```bash
# 사용 가능한 함수 목록 확인
dagger functions

# Hello 함수 실행
dagger call hello --name="개발자"

# 컨테이너 예제 실행
dagger call container-example
```

## 🔄 함수 체이닝의 마법

Dagger의 가장 강력한 기능 중 하나는 **함수 체이닝**입니다[10]. 파이프 연산자(`|`)를 사용해 여러 함수를 연결할 수 있습니다:

### Dagger Shell 예제
```bash
# Dagger Shell 시작
dagger

# 함수 체이닝 예제
container | from alpine | with-exec apk add curl | with-exec curl https://dagger.io | stdout
```

### 복잡한 빌드 파이프라인 예제

```go
func (m *HelloDagger) BuildAndPublish(ctx context.Context, source *dagger.Directory) (string, error) {
    // 멀티스테이지 빌드
    builder := dag.Container().
        From("golang:1.21").
        WithDirectory("/src", source).
        WithWorkdir("/src").
        WithExec([]string{"go", "build", "-o", "app"})

    // 프로덕션 이미지
    return dag.Container().
        From("alpine:latest").
        WithFile("/bin/app", builder.File("/src/app")).
        WithEntrypoint([]string{"/bin/app"}).
        Publish(ctx, "ttl.sh/my-app:latest")
}
```

## 🌐 Daggerverse: 모듈 생태계 활용하기

**Daggerverse**[6]는 공개적으로 사용 가능한 Dagger 모듈들을 검색하고 사용할 수 있는 무료 서비스입니다.

### 외부 모듈 설치 및 사용

```bash
# Trivy 보안 스캐너 모듈 설치
dagger install github.com/dagger/dagger/modules/trivy

# Wolfi 컨테이너 빌더 설치  
dagger install github.com/dagger/dagger/modules/wolfi
```

```go
func (m *HelloDagger) SecurityScan(ctx context.Context) (string, error) {
    // Wolfi 모듈로 컨테이너 생성
    container := dag.Wolfi().Container()
    
    // Trivy 모듈로 보안 스캔
    return dag.Trivy().ScanContainer(ctx, container)
}
```

## ⚡ 캐싱으로 성능 최적화

Dagger의 캐싱 시스템은 개발 속도를 크게 향상시킵니다:

```go
func (m *HelloDagger) CachedBuild(ctx context.Context) *dagger.Container {
    // npm 캐시 볼륨 생성
    npmCache := dag.CacheVolume("npm-cache")
    
    return dag.Container().
        From("node:18").
        WithMountedCache("/root/.npm", npmCache).  // 캐시 마운트
        WithWorkdir("/app").
        WithExec([]string{"npm", "install"})       // 캐시된 패키지 설치
}
```

## 🧪 테스트와 디버깅

### 대화형 터미널 사용
```bash
# 컨테이너 내부로 진입
dagger call cached-build terminal
```

### 테스트 모듈 작성
```go
func (m *HelloDagger) Test(ctx context.Context) error {
    result, err := m.Hello("테스트")
    if err != nil {
        return err
    }
    
    expected := "안녕하세요, 테스트님! Dagger의 세계에 오신 것을 환영합니다! 🚀"
    if result != expected {
        return fmt.Errorf("예상 결과와 다름: %s", result)
    }
    
    return nil
}
```

## 🔧 실무 활용 패턴

### CI/CD 파이프라인 구성

```go
func (m *HelloDagger) CI(ctx context.Context, source *dagger.Directory) error {
    // 1. 코드 품질 검사
    if err := m.Lint(ctx, source); err != nil {
        return err
    }
    
    // 2. 테스트 실행
    if err := m.RunTests(ctx, source); err != nil {
        return err
    }
    
    // 3. 빌드 및 배포
    _, err := m.BuildAndPublish(ctx, source)
    return err
}
```

### 서비스 컨테이너 활용

```go
func (m *HelloDagger) IntegrationTest(ctx context.Context) (string, error) {
    // 데이터베이스 서비스 시작
    dbSvc := dag.Container().
        From("postgres:15").
        WithEnvVariable("POSTGRES_PASSWORD", "secret").
        WithExposedPort(5432).
        AsService()
    
    // 애플리케이션 컨테이너에서 테스트 실행
    return dag.Container().
        From("golang:1.21").
        WithServiceBinding("database", dbSvc).
        WithExec([]string{"go", "test", "./..."}).
        Stdout(ctx)
}
```

## 📈 고급 활용법

### 매트릭스 빌드

```go
func (m *HelloDagger) MatrixBuild(ctx context.Context, source *dagger.Directory) *dagger.Directory {
    oses := []string{"linux", "darwin", "windows"}
    arches := []string{"amd64", "arm64"}
    
    outputs := dag.Directory()
    
    for _, os := range oses {
        for _, arch := range arches {
            binary := m.buildForPlatform(source, os, arch)
            path := fmt.Sprintf("dist/%s-%s/", os, arch)
            outputs = outputs.WithFile(path+"app", binary)
        }
    }
    
    return outputs
}
```

### AI/LLM 통합

```go
func (m *HelloDagger) AICodeReview(ctx context.Context, source *dagger.Directory) (string, error) {
    // LLM을 사용한 코드 리뷰
    return dag.LLM().
        WithModel("gpt-4").
        WithPrompt("다음 Go 코드를 리뷰해주세요").
        WithPromptVar("code", source.File("main.go").Contents(ctx)).
        LastReply(ctx)
}
```

## 🎯 학습 팁과 베스트 프랙티스

### 1. **단계적 학습 접근법**
- 먼저 Dagger Shell로 기본 개념 이해
- 간단한 Function부터 시작해서 점진적으로 복잡한 워크플로우 구성
- 공식 예제들을 직접 실행해보며 동작 원리 파악

### 2. **모듈 설계 원칙**
- 각 Function은 단일 책임을 가지도록 설계
- 재사용 가능한 컴포넌트로 구성
- 명확한 입력/출력 타입 정의

### 3. **성능 최적화**
- 캐시 볼륨을 적극적으로 활용
- 불필요한 파일 복사 최소화
- 병렬 실행 가능한 작업들은 분리

### 4. **디버깅 전략**
- `terminal` 함수로 중간 상태 확인
- Dagger Cloud를 통한 워크플로우 시각화
- 로그와 출력을 활용한 단계별 검증

## 🌟 미래 전망과 확장성

Dagger는 단순한 CI/CD 도구를 넘어서 **DevOps 운영 체제**[11]로 발전하고 있습니다. AI 에이전트 통합, 다양한 클라우드 플랫폼 지원, 그리고 계속 확장되는 언어 지원을 통해 개발자들의 생산성을 혁신적으로 향상시키고 있습니다.

Docker가 컨테이너 기술을 대중화했듯이, Dagger는 프로그래밍 가능한 인프라스트럭처의 새로운 표준을 제시하고 있습니다[2]. 복잡한 YAML 설정 파일과 스크립트들을 코드로 대체하여, 더 안전하고 유지보수 가능한 CI/CD 파이프라인을 구축할 수 있게 됩니다.

이제 여러분도 Dagger의 강력한 기능들을 활용해서 차세대 CI/CD 파이프라인을 구축해보세요! 🚀 궁금한 점이 있으시면 언제든지 [Dagger 커뮤니티](https://discord.gg/dagger-io)에 참여해서 도움을 받으실 수 있습니다.

인용:
[1] Intro to Dagger | Dagger https://docs.dagger.io
[2] Introducing Dagger: a new way to create CI/CD pipelines https://dagger.io/blog/public-launch-announcement
[3] Introduction to Dagger - Anais Urlichs https://anaisurl.com/introduction-to-dagger/
[4] Releases · dagger/dagger - GitHub https://github.com/dagger/dagger/releases
[5] Introducing the concept of Dagger in CI/CD - NashTech Blog https://blog.nashtechglobal.com/introducing-the-concept-of-dagger-in-ci-cd/
[6] Reusable Modules - Dagger Docs https://docs.dagger.io/features/modules/
[7] Installation - Dagger Docs https://docs.dagger.io/install/
[8] CI/CD 파이프라인 엔진 Dagger https://blog.outsider.ne.kr/1642
[9] Core Types - Dagger Docs https://docs.dagger.io/api/types/
[10] Dagger API https://docs.dagger.io/api/
[11] FAQ - Dagger Docs https://docs.dagger.io/faq/
[12] Dagger https://dagger.dev
[13] Build a CI Pipeline - Dagger Documentation https://docs.dagger.io/ci/quickstart/
[14] Examples - Dagger Docs https://docs.dagger.io/examples/
[15] Build a CI Pipeline - Dagger Docs https://docs.dagger.io/quickstart/ci
[16] Introducing Dagger Functions https://dagger.io/blog/introducing-dagger-functions
[17] Dagger | Blog https://dagger.io/blog
[18] Quickstart - Dagger Docs https://docs.dagger.io/quickstart
[19] dagger/examples - GitHub https://github.com/dagger/examples
[20] How we release Dagger https://dagger.io/blog/how-dagger-releases
[21] techchapter/dagger-pipeline-example - GitHub https://github.com/techchapter/dagger-pipeline-example
[22] dagger-io - PyPI https://pypi.org/project/dagger-io/
[23] Dagger Tutorial CI/CD - YouTube https://www.youtube.com/watch?v=Rc0NCpc2YSc
[24] Develop your pipelines as code with the Dagger Python SDK https://dagger.io/blog/python-sdk
[25] Building Momentum: 2024 Highlights and What's Ahead in 2025 https://dagger.io/blog/2024-highlights
[26] Dagger Tutorial https://dagger.dev/tutorial/
[27] Building a Dagger Module to standardize the CI pipeline of my Go ... https://www.felipecruz.es/building-a-dagger-module/
[28] Dagger ❤️ Depot https://dagger.io/blog/dagger-and-depot
[29] Introduction to Dagger: CI/CD pipelines as code - Playground Tech https://blog.playgroundtech.io/introduction-to-dagger-6ab55ee28723
[30] Dagger.io - Tech Chapter https://www.techchapter.com/en/skills/dagger/
[31] Cookbook - Dagger Docs https://docs.dagger.io/cookbook
[32] Kubernetes - Dagger Docs https://docs.dagger.io/ci/integrations/kubernetes/
[33] Dagger basics | App architecture - Android Developers https://developer.android.com/training/dependency-injection/dagger-basics
[34] Programmable Workflows - Dagger Docs https://docs.dagger.io/features/programmability
[35] An Alternative Introduction to Dagger: Understanding the Core ... https://labs.iximiuz.com/courses/dagger
[36] Configuration - Dagger Docs https://docs.dagger.io/configuration/
[37] A Java SDK Proof of Concept for Dagger.io | by Jean-Christophe Sirot https://betterprogramming.pub/a-java-sdk-proof-of-concept-for-dagger-io-b1067e256116
[38] Examples - Dagger Docs https://docs.dagger.io/examples
[39] How to scale Dagger in production? · Issue #6486 - GitHub https://github.com/dagger/dagger/issues/6486
[40] Dagger 간단히 알아보기 - 개발 이야기 - 티스토리 https://faith-developer.tistory.com/148
[41] [번역] 쉬운 Dagger2 - Pluu Dev https://pluu.github.io/blog/android/2017/01/12/android-dagger/
[42] Dagger Functions와 함께하는 CI/CD Pipeline as Code https://blog.seungyeop-lee.com/post/dagger-functions-introduction/
[43] Dagger2 기본 #1 - 시작 - 하하하하하 - 티스토리 https://kwongdevelop.tistory.com/24
[44] Dagger2 학습에 필요한 참고자료 - 커니의 안드로이드 이야기 https://www.androidhuman.com/2016-06-06-dagger2_resources
[45] CI/CD 파이프라인 엔진 Dagger의 Node.js SDK https://blog.outsider.ne.kr/1646
[46] Dagger Hilt로 안드로이드 의존성 주입 시작하기 - 하이퍼커넥트 https://hyperconnect.github.io/2020/07/28/android-dagger-hilt.html
[47] Hilt 예제 (feat. Retrofit) - velog https://velog.io/@hyeok6640/Hilt-%EC%98%88%EC%A0%9C-feat.-Retrofit
[48] 프로그래밍 가능한 CICD 엔진 Dagger - 커리어리 https://careerly.co.kr/comments/86439
[49] 간단한 예제로 보는 Dagger2 적용 - 서밋코퍼레이션 - 티스토리 https://summit-corp.tistory.com/4
[50] Dagger2 기초 부터 https://pyeongho.github.io/re-dagger2
[51] Dagger.io와 container-use를 통한 재현 가능하고 격리된 AI 에이전트 ... https://www.youtube.com/watch?v=kVsTWviBN3E
[52] 간단한 예제로 보는 Dagger2 적용해보자! - 개발새발블로그 https://seansation-blog.tistory.com/8
[53] [Dagger] Dagger란? - 만자의 개발일지 - 티스토리 https://yoo11052.tistory.com/163
[54] [번역] Docker 개발팀이 만든 CI/CD 파이프라인 툴 Dagger - g0ni https://g0n1.tistory.com/203
[55] [Android, MVP, Dagger] MVP 기본 예제 - Dagger 사용하기 https://black-jin0427.tistory.com/151
[56] Module Structure - Dagger Docs https://docs.dagger.io/api/module-structure/
[57] Programmable Workflows - Dagger Docs https://docs.dagger.io/features/programmability/
[58] Module Tests - Dagger Docs https://docs.dagger.io/api/module-tests
[59] playgroundtech/dagger-go-example-app - GitHub https://github.com/playgroundtech/dagger-go-example-app
[60] Services - Dagger Docs https://docs.dagger.io/api/services/
[61] Modules - Dagger Docs https://docs.dagger.io/configuration/modules
[62] The Daggerverse in Practice - Dagger.io https://dagger.io/blog/daggerverse-in-practice
[63] Chaining - Dagger Docs https://docs.dagger.io/api/chaining/
[64] Dagger.io https://dagger.io
[65] Dagger.io - Using dagger to automate your CI workflows https://www.avonture.be/blog/dagger-python/
[66] Building an MLOps pipeline with Dagger.io and KitOps - Jozu https://jozu.com/blog/building-an-mlops-pipeline-with-dagger-io-and-kitops/
[67] Custom Functions - Dagger Docs https://docs.dagger.io/api/custom-functions/
[68] Writing Your First Dagger Function and Digging Into Its Runtime https://labs.iximiuz.com/courses/dagger/writing-first-function
[69] Basics | Dagger https://docs.dagger.io/quickstart/
