---
layout: post
title:  "SE Data Architecture 주제 영역 도출"
date:   2025-08-06 07:26:00 +0900
categories: SW Engineering
---

# 소프트웨어 엔지니어링 데이터 아키텍처 설계를 위한 가치 사슬 분석 기반 주제 영역(Subject Area) 도출

> ### **요약**
> 본 보고서는 소프트웨어 엔지니어링 조직에서 생성되는 방대한 양의 데이터를 체계적으로 관리하고 분석하기 위한 데이터 아키텍처 수립의 첫 단계로, '주제 영역(Subject Area)'을 정의하는 구체적인 방법론을 제시한다. 이를 위해 경영 전략의 고전적 모델인 마이클 포터(Michael Porter)의 가치 사슬 분석 기법을 활용하여, 소프트웨어 개발 생명주기(SDLC)라는 핵심 비즈니스 프로세스를 분석하고, 이로부터 데이터 아키텍처의 논리적 구성 단위인 주제 영역을 도출한다.
>
> 본 프레임워크는 소프트웨어 엔지니어링 조직의 핵심 가치 창출 활동을 포터의 모델에 맞춰 재해석한다. 본원적 활동은 '아이디어 및 요구사항 관리', '설계 및 개발', '테스트 및 품질 보증', '배포 및 릴리스', '운영 및 유지보수'로 정의되며, 이는 아이디어가 최종적으로 운영되는 서비스가 되기까지의 핵심 흐름을 나타낸다. 각 활동 단계에서 생성되고 소비되는 구체적인 데이터(예: Jira 이슈, Git 커밋, CI/CD 파이프라인 로그, 테스트 결과, 운영 인시던트 등)를 식별하고, 이 데이터들의 논리적 연관성을 분석한다.
>
> 이 분석 과정을 통해, 분산된 개별 데이터 포인트들은 상호 관련된 데이터의 집합인 주제 영역으로 그룹화된다. 본 보고서는 '기획 및 요구사항', '코드 및 개발', '빌드 및 배포', '품질 및 테스트', '운영 및 안정성'이라는 5가지 핵심 주제 영역을 제안한다. 각 주제 영역은 특정 데이터 도메인을 대표하며, 관련된 데이터 엔티티(예: 요구사항, 커밋, 빌드, 테스트 케이스, 인시던트)와 그 속성들을 포함한다. 이 접근법은 기술 중심이 아닌 비즈니스 프로세스(가치 사슬)에 기반하여 데이터 아키텍처의 청사진을 제시함으로써, 데이터의 일관성을 유지하고 데이터 사일로를 방지하며, 궁극적으로 소프트웨어 엔지니어링 프로세스 전반에 대한 깊이 있는 분석과 개선을 가능하게 하는 체계적인 데이터 기반을 마련하는 것을 목표로 한다.

## 파트 I: 기초 프레임워크의 이해

본격적인 주제 영역 도출에 앞서, 본 보고서의 분석 기반이 되는 두 가지 핵심 개념, 즉 '데이터 아키텍처의 주제 영역'과 '포터의 가치 사슬 모델'을 명확히 이해하는 것이 중요하다. 이 과정을 통해 두 개념의 본질을 파악하고, 가치 사슬 분석이 어떻게 데이터 아키텍처 설계를 위한 논리적 프레임워크를 제공할 수 있는지에 대한 공감대를 형성할 수 있을 것이다.

### 섹션 1: 분석 목표 - 데이터 아키텍처와 주제 영역(Subject Area)

데이터 아키텍처는 데이터가 수집, 변환, 배포, 소비되는 방식, 즉 데이터가 시스템을 통해 흐르는 방식에 대한 청사진을 설명한다. 잘 설계된 아키텍처는 데이터의 중복성을 줄이고 품질을 향상시키며, 조직 전체에서 데이터가 일관되고 유용하게 유지되도록 보장한다.

데이터 아키텍처를 설계하는 첫 단계 중 하나는 **주제 영역(Subject Area)**을 설정하는 것이다. 주제 영역은 조직에 중요한 지식의 주제 또는 도메인으로, 논리적으로 관련된 데이터의 집합을 의미한다. 예를 들어, '고객', '제품', '주문' 등은 일반적인 비즈니스의 주제 영역이다. 주제 영역을 먼저 정의하는 이유는 다음과 같다.

-   **비즈니스 정렬**: 기술이 아닌 비즈니스 개념을 중심으로 데이터를 구성함으로써, 데이터 구조가 실제 비즈니스 프로세스와 목표에 부합하도록 보장한다.
-   **데이터 사일로 방지**: 여러 시스템에 흩어져 있는 관련 데이터를 하나의 논리적 그룹으로 묶어 전사적인 관점을 제공하고 부서 간 데이터 장벽을 허문다.
-   **일관성 및 재사용성 증대**: 주제 영역 내에서 데이터 정의, 형식, 품질 규칙을 표준화하여 데이터의 일관성을 유지하고, 여러 분석 및 애플리케이션에서 데이터를 쉽게 재사용할 수 있도록 한다.

본 보고서의 목표는 소프트웨어 엔지니어링이라는 특정 비즈니스 도메인에 대한 데이터를 분석하고 제공하기 위해, 이 주제 영역을 체계적으로 도출하는 것이다.

### 섹션 2: 분석 도구 - 포터의 가치 사슬 모델

주제 영역을 논리적으로 도출하기 위해, 우리는 조직의 핵심 비즈니스 프로세스를 분석할 필요가 있다. 마이클 포터의 가치 사슬(Value Chain) 모델은 기업이 고객에게 가치를 제공하는 일련의 과정을 분석하기 위한 강력한 전략적 도구이다. 이 모델은 기업의 활동을 가치를 직접 창출하는 '본원적 활동(Primary Activities)'과 이를 지원하는 '지원 활동(Support Activities)'으로 구분한다.

-   **본원적 활동 (Primary Activities)**: 제품이나 서비스의 물리적 창출, 판매, 고객에게 이전, 그리고 사후 서비스와 직접적으로 관련된 활동들이다.
    -   입고 물류 (Inbound Logistics)
    -   운영 (Operations)
    -   출고 물류 (Outbound Logistics)
    -   마케팅 및 영업 (Marketing & Sales)
    -   서비스 (Service)
-   **지원 활동 (Support Activities)**: 본원적 활동이 효율적으로 수행될 수 있도록 간접적으로 지원하는 활동들이다.
    -   조달 (Procurement)
    -   기술 개발 (Technology Development)
    -   인적 자원 관리 (Human Resource Management)
    -   기업 인프라 (Firm Infrastructure)

소프트웨어 엔지니어링 프로세스에 이 모델을 적용함으로써, 우리는 아이디어가 코드로 변환되고 고객에게 가치를 전달하기까지의 각 단계(활동)를 명확히 식별할 수 있다. 그리고 각 활동에서 어떤 데이터가 생성되고 필요한지를 파악함으로써, 자연스럽게 연관된 데이터들을 그룹화하여 데이터 아키텍처의 주제 영역을 정의할 수 있다. 이는 기술적 관점이 아닌, 가치 창출이라는 비즈니스 흐름에 기반한 데이터 아키텍처 설계를 가능하게 한다.

## 파트 II: 소프트웨어 엔지니어링 가치 사슬 분석 및 데이터 식별

본 파트에서는 소프트웨어 개발 생명주기(SDLC)를 포터의 가치 사슬 모델에 매핑하여 재해석하고, 각 활동 단계에서 생성되는 핵심 데이터 엔티티와 속성들을 구체적으로 식별한다. 이 과정은 데이터 아키텍처의 주제 영역을 도출하기 위한 기초 분석 단계이다.

### 섹션 3: 본원적 활동 - 가치 창출 흐름과 생성 데이터

본 섹션에서는 소프트웨어의 가치가 직접적으로 창출되는 5가지 본원적 활동을 상세히 다룬다. 각 활동의 목적과 프로세스를 정의하고, 해당 활동을 분석하는 데 필요한 핵심 데이터 엔티티와 그 속성들을 제시한다.

#### 3.1 입고 물류 (재해석: '아이디어 및 요구사항 관리')

-   **목적**: 소프트웨어의 '원자재'인 아이디어, 비즈니스 목표, 사용자 피드백을 수집, 분석, 정제하여 실행 가능한 개발 요구사항으로 전환하는 모든 과정을 포괄한다.
-   **프로세스 및 개념**: 프로젝트 기획, 요구사항 수집, 백로그 관리, 사용자 스토리 작성, 스프린트 계획 등이 포함된다.
-   **핵심 데이터 엔티티 및 속성 (소스: Jira 등 프로젝트 관리 도구)**:
    -   **요구사항/이슈 (Requirement/Issue)**: 이슈 ID, 이슈 유형(에픽, 스토리, 태스크, 버그), 상태, 우선순위, 요약, 설명, 담당자, 보고자, 생성일, 해결일, 업데이트일, 스토리 포인트, 관련 컴포넌트/레이블.
    -   **스프린트 (Sprint)**: 스프린트 ID, 이름, 목표, 시작일, 종료일, 상태.
    -   **릴리스/버전 (Release/Version)**: 버전 ID, 이름, 설명, 출시일.

#### 3.2 운영 (재해석: '설계 및 개발')

-   **목적**: 요구사항을 실제 동작하는 코드로 전환하는 핵심적인 개발 활동이다. 시스템 아키텍처 설계, 실제 코딩, 동료 코드 리뷰, 단위 테스트 등이 이 활동의 주요 프로세스를 구성한다.
-   **프로세스 및 개념**: 아키텍처 설계, 코딩, 버전 관리, 풀 리퀘스트(PR) 기반의 코드 리뷰 및 협업.
-   **핵심 데이터 엔티티 및 속성 (소스: Git, GitHub/GitLab 등 버전 관리 시스템)**:
    -   **리포지토리 (Repository)**: 리포지토리 ID, 이름, 소유자.
    -   **커밋 (Commit)**: 커밋 해시(Hash), 작성자, 커밋 시간, 커밋 메시지, 변경된 파일 목록, 추가/삭제된 코드 라인 수.
    -   **브랜치 (Branch)**: 브랜치 이름, 생성일, 마지막 커밋 해시.
    -   **풀 리퀘스트/머지 리퀘스트 (Pull Request/Merge Request)**: PR ID, 제목, 작성자, 생성일, 종료일(머지/종료), 상태(Open, Merged, Closed), 소스/타겟 브랜치, 리뷰어, 리뷰 코멘트.

#### 3.3 테스트 및 품질 보증 (Testing & Quality Assurance)

-   **목적**: 개발된 소프트웨어가 요구사항을 충족하고 잠재적 결함이 없는지 체계적으로 검증하고 확인하는 과정이다.
-   **프로세스 및 개념**: 테스트 케이스 설계, 수동/자동 테스트 실행, 결함 보고 및 추적, 코드 정적 분석.
-   **핵심 데이터 엔티티 및 속성 (소스: TestRail, Xray, SonarQube 등 품질 관리 도구)**:
    -   **테스트 케이스 (Test Case)**: 테스트 케이스 ID, 제목, 우선순위, 연관된 요구사항 ID.
    -   **테스트 실행 (Test Run)**: 실행 ID, 테스트 케이스 ID, 실행자, 실행일, 결과(Pass, Fail, Blocked), 소요 시간.
    -   **결함/버그 (Defect/Bug)**: 결함 ID, 요약, 심각도, 우선순위, 상태, 보고자, 담당자, 발견된 버전, 수정된 버전, 생성일, 해결일 (Jira 이슈와 연계 가능).
    -   **코드 분석 리포트 (Code Analysis Report)**: 분석 ID, 커밋 해시, 코드 복잡도, 코드 중복률, 코드 스멜 수, 보안 취약점 수, 테스트 커버리지(%).

#### 3.4 출고 물류 (재해석: '배포 및 릴리스')

-   **목적**: 테스트가 완료된 소프트웨어를 안정적이고 효율적으로 최종 사용자에게 전달하는 모든 과정. CI/CD(지속적 통합/배포) 파이프라인을 통해 자동화된다.
-   **프로세스 및 개념**: 빌드 자동화, 패키징, 테스트 환경 및 프로덕션 환경으로의 배포.
-   **핵심 데이터 엔티티 및 속성 (소스: Jenkins, GitLab CI, GitHub Actions 등 CI/CD 도구)**:
    -   **빌드/파이프라인 (Build/Pipeline)**: 파이프라인 ID, 실행 번호, 트리거 소스(커밋, 수동 등), 관련 커밋 해시/브랜치, 시작/종료 시간, 총 소요 시간, 상태(Success, Failure, Canceled).
    -   **배포 (Deployment)**: 배포 ID, 파이프라인 ID, 배포 시간, 대상 환경(개발, 스테이징, 프로덕션), 배포된 아티팩트 버전, 결과(Success, Failure).

#### 3.5 서비스 (재해석: '운영 및 유지보수')

-   **목적**: 배포된 소프트웨어가 프로덕션 환경에서 안정적으로 가치를 제공하도록 보장하는 활동. 장애 대응, 성능 모니터링, 사용자 지원 등이 포함된다.
-   **프로세스 및 개념**: 인시던트 관리, 모니터링 및 알림, 사후 검토(Post-mortem).
-   **핵심 데이터 엔티티 및 속성 (소스: PagerDuty, Datadog 등 모니터링 및 인시던트 관리 도구)**:
    -   **서비스/컴포넌트 (Service/Component)**: 서비스 ID, 이름, 소유 팀.
    -   **인시던트 (Incident)**: 인시던트 ID, 제목, 심각도, 상태(Triggered, Acknowledged, Resolved), 발생 시간, 해결 시간, 총 해결 시간(MTTR), 영향받는 서비스.
    -   **알림 (Alert)**: 알림 ID, 발생 시간, 알림 규칙, 심각도, 대상 서비스.
    -   **사후 검토 (Post-mortem)**: 문서 ID, 관련 인시던트 ID, 근본 원인, 액션 아이템.

## 파트 III: 소프트웨어 엔지니어링 데이터 주제 영역(Subject Area) 정의

앞선 가치 사슬 분석을 통해 식별된 데이터 엔티티들을 바탕으로, 소프트웨어 엔지니어링 데이터 분석을 위한 데이터 아키텍처의 핵심 주제 영역을 도출한다. 각 주제 영역은 논리적으로 연관된 데이터의 집합체로서, 데이터 모델링 및 데이터 웨어하우스 설계의 기초가 된다.

### 표 1: 가치 사슬 기반의 소프트웨어 엔지니어링 데이터 주제 영역

아래 표는 본 보고서의 최종적인 산출물로, 소프트웨어 엔지니어링 가치 사슬의 각 활동에서 생성되는 데이터를 그룹화한 5가지 핵심 주제 영역을 제안한다. 이는 데이터 아키텍처 설계를 위한 구체적이고 실행 가능한 청사진을 제공한다.

| 주제 영역 (Subject Area) | 설명 및 목적 | 핵심 데이터 엔티티 | 데이터 소스 예시 |
| :--- | :--- | :--- | :--- |
| **1. 기획 및 요구사항 (Planning & Requirements)** | 아이디어 구상부터 작업 할당까지의 모든 기획 및 관리 활동 데이터를 포함. 프로젝트의 진행 상황과 작업 흐름을 분석하는 데 사용됨. | -  요구사항/이슈 (Requirement/Issue)<br>-  스프린트 (Sprint)<br>-  릴리스/버전 (Release/Version)<br>-  에픽 (Epic) | Jira, Asana, Trello 등 프로젝트 관리 도구 |
| **2. 코드 및 개발 (Code & Development)** | 소스 코드의 생성, 변경, 리뷰 등 개발 프로세스 자체에서 발생하는 모든 데이터를 포함. 개발자 및 팀의 생산성과 협업 패턴을 분석하는 데 사용됨. | -  리포지토리 (Repository)<br>-  커밋 (Commit)<br>-  브랜치 (Branch)<br>-  풀 리퀘스트 (Pull Request)<br>-  코드 리뷰 (Code Review) | GitHub, GitLab, Bitbucket 등 버전 관리 시스템 |
| **3. 빌드 및 배포 (Build & Deployment)** | 코드가 빌드되고 프로덕션 환경에 배포되기까지의 CI/CD 파이프라인 관련 모든 데이터를 포함. 소프트웨어 전달 속도와 효율성을 측정하는 데 사용됨 (DORA 메트릭 등). | -  빌드/파이프라인 (Build/Pipeline)<br>-  배포 (Deployment)<br>-  아티팩트 (Artifact)<br>-  파이프라인 단계 (Stage/Job) | Jenkins, GitLab CI, GitHub Actions, CircleCI 등 CI/CD 도구 |
| **4. 품질 및 테스트 (Quality & Testing)** | 소프트웨어의 품질을 보증하기 위한 모든 테스트 활동과 코드 정적 분석 결과를 포함. 제품의 품질 수준과 테스트 프로세스의 효율성을 평가하는 데 사용됨. | -  테스트 케이스 (Test Case)<br>-  테스트 실행 (Test Run)<br>-  결함/버그 (Defect/Bug)<br>-  코드 분석 리포트 (Code Analysis Report) | Xray, Zephyr, TestRail, SonarQube, Codacy 등 품질 관리 도구 |
| **5. 운영 및 안정성 (Operations & Reliability)** | 소프트웨어 배포 후 프로덕션 환경에서의 성능, 장애, 인시던트 관련 모든 데이터를 포함. 서비스의 안정성과 장애 대응 능력을 측정하는 데 사용됨 (SRE 메트릭 등). | -  서비스/컴포넌트 (Service/Component)<br>-  인시던트 (Incident)<br>-  알림 (Alert)<br>-  사후 검토 (Post-mortem)<br>-  서비스 수준 지표 (SLI/SLO) | PagerDuty, Datadog, Splunk, Opsgenie 등 모니터링 및 인시던트 관리 도구 |

## 결론

본 보고서는 소프트웨어 엔지니어링 조직의 복잡한 활동을 마이클 포터의 가치 사슬 프레임워크를 통해 체계적으로 분석하고, 이를 기반으로 데이터 아키텍처의 핵심 구성 요소인 '주제 영역(Subject Area)'을 도출하는 방법론을 제시했다. 이 접근법은 단순히 기술 스택이나 데이터 소스를 나열하는 방식에서 벗어나, 조직이 가치를 창출하는 비즈니스 프로세스의 흐름에 따라 데이터를 논리적으로 구조화할 수 있도록 돕는다.

'기획 및 요구사항', '코드 및 개발', '빌드 및 배포', '품질 및 테스트', '운영 및 안정성'으로 정의된 5가지 주제 영역은 각각의 가치 사슬 활동과 직접적으로 연결된다. 이는 데이터 아키텍처가 조직의 실제 업무와 긴밀하게 연계되도록 보장하며, 각 주제 영역 내 데이터의 의미와 관계를 명확하게 이해할 수 있도록 한다.

결론적으로, 이처럼 비즈니스 프로세스에 기반한 주제 영역 정의는 성공적인 데이터 아키텍처 수립의 핵심적인 첫걸음이다. 이는 향후 데이터 모델링, 데이터 웨어하우스 구축, 그리고 BI 대시보드 및 분석 시스템 개발 과정에서 일관된 기준을 제공할 것이다. 잘 정의된 주제 영역을 바탕으로 구축된 데이터 아키텍처는 소프트웨어 엔지니어링 조직이 과거의 성과를 측정하고, 현재의 병목 현상을 진단하며, 미래의 프로세스 개선 방향을 예측하는 강력한 데이터 기반 의사결정의 토대가 될 것이다.

