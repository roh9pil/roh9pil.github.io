🤖 LLM 기반 Text2SQL 기술 개요
자연어(사람의 언어)로 질문하면 데이터베이스 조회 언어인 SQL로 자동 변환하여 결과를 얻는 기술에 대한 요약입니다.
🤔 Text2SQL, 왜 개발하기 어려울까요?
Text2SQL 시스템을 구축하는 데에는 크게 세 가지 기술적 어려움이 존재합니다.
1. 맥락 전달의 어려움
 * 명시적 맥락: 데이터베이스 스키마, 테이블 및 컬럼의 관계 등 구조적인 정보.
 * 암묵적 맥락: 데이터가 갖는 실제 의미, 특정 비즈니스 도메인에서만 사용되는 용어 등 숨겨진 정보.
 * LLM에게 이 두 가지 종류의 복합적인 맥락을 정확하게 전달하기 어렵습니다.
2. 자연어 의도 파악의 어려움
 * 표현의 다양성: 같은 의도라도 사람마다 질문하는 방식이 다릅니다.
 * 의도의 모호성: 질문 자체가 중의적으로 해석될 여지가 있어 사용자의 진짜 의도를 파악하기 힘듭니다.
3. 기술적 복잡성
 * 복잡한 쿼리: 여러 테이블을 연결하는 JOIN, 쿼리 안의 쿼리인 서브쿼리, 데이터 요약을 위한 집계 함수 등 복잡한 SQL 구문을 생성해야 합니다.
 * 데이터베이스 방언 (Dialect): 각 데이터베이스 시스템(MySQL, PostgreSQL 등)마다 미묘하게 다른 SQL 문법 차이를 고려해야 합니다.
💡 기본 Text2SQL 시스템의 핵심 3단계
가장 기본적인 Text2SQL 시스템은 다음과 같은 3단계 프로세스로 동작합니다.
 * ➡️ 자연어 질문 분석
   * 사용자의 질문에서 핵심 요소(어떤 데이터를 원하는지, 조건은 무엇인지 등)와 숨은 의도를 추출합니다.
   * 추출된 내용을 기계가 이해할 수 있는 구조화된 형식으로 변환합니다.
 * ➡️ SQL 생성
   * 분석된 내용을 바탕으로, 데이터베이스가 실행할 수 있는 유효한 SQL 쿼리 구문으로 매핑하고 생성합니다.
 * ➡️ 데이터베이스 쿼리 및 결과 반환
   * 생성된 SQL을 실제 데이터베이스에 전송하여 실행합니다.
   * 조회된 결과를 사용자에게 다시 전달합니다.
🛠️ LLM 성능을 높이는 2가지 핵심 방법론
기본 LLM의 Text2SQL 성능을 특정 도메인에 맞게 향상시키기 위해 주로 두 가지 방법론이 사용됩니다.
1. 프롬프트 엔지니어링 (Prompt Engineering)
LLM에게 더 정확한 SQL을 생성하도록 질문(프롬프트) 자체를 잘 설계하는 기술입니다.
 * 입력 데이터: 사용자 질문 + 데이터베이스 구조 + 예시 질문/SQL + 시스템 설명
 * 프로세스:
   [잘 설계된 프롬프트] -> [LLM] -> [SQL 반환] -> [검증] -> [쿼리 실행] -> [결과]

2. 파인튜닝 (Fine-tuning)
사전 학습된 LLM(Base LLM)을 실제 업무에서 사용하는 질의/정답 데이터셋으로 추가 학습시키는 방법입니다. 이를 통해 특정 데이터베이스와 도메인 지식에 특화된 모델을 만들 수 있습니다.
 * 프로세스:
   [프롬프트] -> [Fine-tuned LLM] -> [SQL 반환] -> [검증] -> [쿼리 실행] -> [결과]

 * 특징: 도메인별 데이터셋을 구축하여 Base LLM을 미세조정함으로써 더 높은 정확도를 기대할 수 있습니다.
🚀 새로운 패러다임: Agentic Workflow
하나의 거대한 LLM이 모든 것을 처리하는 대신, 각자 명확한 역할을 가진 여러 '전문가 에이전트(Agent)'들이 협력하여 문제를 해결하는 방식입니다.
전체 아키텍처 흐름
사용자 → 클라이언트 → 웹서버 → AI 에이전트 서버 → (LangChain, LangGraph 등 워크플로우) → LLM(Claude), RAG, DB → 결과
에이전트들의 협업 방식
> 1. Question Agent (질문 분석 에이전트)
>  * 사용자 질문을 가장 먼저 받습니다.
>  * 질문의 의도(Intent), 모호성(Ambiguity), 복잡도(Complexity)를 분석합니다.
>  * 복잡한 질문은 여러 개의 간단한 질문으로 분할(Split)합니다.
> 
> 2. Query Agent(s) (쿼리 생성/실행 에이전트)
>  * 분할된 각 질문을 받아 처리합니다.
>  * 각 질문에 맞는 SQL을 생성하고 실행하여 결과를 임시 저장소(예: S3)에 저장합니다.
>  * 여러 개의 Query Agent가 병렬로 작업을 수행할 수 있습니다.
> 
> 3. Answer Agent (답변 생성 에이전트)
>  * 각 Query Agent가 저장한 결과들을 모두 취합합니다.
>  * 종합된 결과를 바탕으로 사용자에게 보여줄 최종 답변(일반 텍스트, 차트, 요약 등)을 생성합니다.
> 
